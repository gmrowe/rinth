#! /usr/bin/env bb

(require '[clojure.string :as str]
         '[babashka.cli :as cli]
         '[babashka.deps :as deps])

(def supported-algorithms
  [{:name "binary-tree"
    :description "a simple binary tree maze generating algorithm"}
   {:name "sidewinder" :description "a sidewinder maze generating algorithm"}
   {:name "aldous-broder" :description "Aldous-Broder random walk algorithm"}])

(def usage
  (str/join
   \newline
   (concat
    [(format
      "Usage: %s [-r <integer>] [-c <integer>] [--show-paths] <algorithm> "
      *file*)
     ""
     "   -r <integer> (optional): specify number of rows."
     "   -c <integer> (optional): specify number of columns."
     ""
     "Supported algorithms are:"]
    (map (fn [{:keys [name description]}] (format "%15s: %s." name description))
         supported-algorithms))))


(defn print-usage-and-exit [exit-code] (println usage) (System/exit exit-code))

(defn run
  [cl-args]
  (let [{:keys [args opts]} cl-args
        clojure-args (concat ["-X" "rinth.main/cli-entry"]
                             (when-let [rows (:rows opts)] [":rows" rows])
                             (when-let [cols (:cols opts)] [":cols" cols])
                             (when-let [show-path (:show-path opts)]
                               [":show-path" show-path])
                             (when-let [algorithm (:algorithm opts)]
                               [":algorithm" algorithm]))]
    (if (:help opts)
      (print-usage-and-exit 0)
      (if-let [proc (deps/clojure clojure-args)]
        (-> @proc
            :exit
            (System/exit))
        (System/exit 0)))))

(def cli-spec
  {:rows {:coerce :long :alias :r}
   :cols {:coerce :long :alias :c}
   :show-path {:coerce :boolean :alias :p}
   :help {:coerce :boolean :alias :h}})

(when (= *file* (System/getProperty "babashka.file"))
  (let [args (cli/parse-args *command-line-args* {:spec cli-spec})]
    (prn args)
    (run args)))


